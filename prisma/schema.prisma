generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  testResults   TestResult[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String     @id @default(cuid())
  identifier  String     @unique // e.g. "niaiqqngw"
  name        String
  description String?
  questions   Question[]
  testResults TestResult[] // Link to existing TestResult model
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([identifier])
}

model Question {
  id            String   @id @default(cuid())
  question      String
  answerOptions Json     // Stored as a JSON array of strings
  correctAnswer Int
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([categoryId])
}

model TestResult {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  score      Int      // 正解数
  total      Int      // 問題総数
  percentage Int      // 正答率
  createdAt  DateTime @default(now())
  
  // リレーション
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id])
  
  // インデックス（検索を高速化）
  @@index([userId])
  @@index([categoryId])
}